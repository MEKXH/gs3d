name: Build Multi-Platform Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        python-version: ['3.10']
        include:
          - os: ubuntu-20.04
            platform_name: linux
            executable_extension: ""
          - os: windows-2019
            platform_name: windows
            executable_extension: ".exe"
          - os: macos-11
            platform_name: macos
            executable_extension: ""

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller boto3 tqdm

    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-2019'
      run: |
        pyinstaller --onefile --console --clean --name gs3d --hidden-import=boto3 --hidden-import=botocore --hidden-import=tqdm --hidden-import=urllib3 --exclude-module=tkinter --exclude-module=matplotlib src/G3SD.py

    - name: Build with PyInstaller (Unix)
      if: matrix.os != 'windows-2019'
      run: |
        pyinstaller --onefile --console --clean --name gs3d --hidden-import=boto3 --hidden-import=botocore --hidden-import=tqdm --hidden-import=urllib3 --exclude-module=tkinter --exclude-module=matplotlib src/G3SD.py

    - name: Get architecture
      id: arch
      run: |
        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          echo "arch=x86_64" >> $GITHUB_OUTPUT
        else
          echo "arch=$(uname -m)" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Rename executable
      run: |
        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          mv dist/gs3d.exe dist/gs3d-${{ matrix.platform_name }}-${{ steps.arch.outputs.arch }}.exe
        elif [ "${{ matrix.os }}" = "macos-11" ]; then
          mv dist/gs3d dist/gs3d-macos-${{ steps.arch.outputs.arch }}
        else
          mv dist/gs3d dist/gs3d-linux-${{ steps.arch.outputs.arch }}
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gs3d-${{ matrix.platform_name }}-${{ steps.arch.outputs.arch }}
        path: |
          dist/gs3d-*

    - name: Create checksums
      run: |
        cd dist
        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          certutil -hashfile gs3d-${{ matrix.platform_name }}-${{ steps.arch.outputs.arch }}.exe SHA256 > gs3d-${{ matrix.platform_name }}-${{ steps.arch.outputs.arch }}.exe.sha256
        else
          sha256sum gs3d-${{ matrix.platform_name }}-${{ steps.arch.outputs.arch }} > gs3d-${{ matrix.platform_name }}-${{ steps.arch.outputs.arch }}.sha256
        fi
      shell: bash

    - name: Upload checksum artifact
      uses: actions/upload-artifact@v3
      with:
        name: checksums
        path: |
          dist/*.sha256

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir release
        cp artifacts/gs3d-linux-*/gs3d-linux-* release/
        cp artifacts/gs3d-macos-*/gs3d-macos-* release/
        cp artifacts/gs3d-windows-*/gs3d-windows-*.exe release/
        cp artifacts/checksums/* release/

        # Create combined checksums file
        cat release/*.sha256 > release/checksums.txt
        rm release/*.sha256

    - name: Create Release Note
      run: |
        echo "# GS3D - Generic S3 Downloader" > release-notes.md
        echo "" >> release-notes.md
        echo "## Downloads" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Windows" >> release-notes.md
        echo "- [gs3d-windows-x86_64.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gs3d-windows-x86_64.exe)" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Linux" >> release-notes.md
        echo "- [gs3d-linux-x86_64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gs3d-linux-x86_64)" >> release-notes.md
        echo "" >> release-notes.md
        echo "### macOS" >> release-notes.md
        echo "- [gs3d-macos-x86_64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gs3d-macos-x86_64)" >> release-notes.md
        echo "- [gs3d-macos-arm64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gs3d-macos-arm64)" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Usage" >> release-notes.md
        echo "" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "# Download a single file" >> release-notes.md
        echo "gs3d https://bucket.s3.amazonaws.com/file.txt" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Anonymous access" >> release-notes.md
        echo "gs3d https://public-bucket.s3.amazonaws.com/file.txt -a" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Download to specific directory" >> release-notes.md
        echo "gs3d s3://bucket/folder/ -o ./downloads" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Verification" >> release-notes.md
        echo "" >> release-notes.md
        echo "All binaries are provided with SHA256 checksums in [checksums.txt](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/checksums.txt)" >> release-notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*
        body_path: release-notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}